import { takeUntil } from 'rxjs/operators';
import { setupSubjectUnsubscribedChecker } from './checker';
import { DECORATOR_APPLIED, getSymbol, createSubjectOnTheInstance, completeSubjectOnTheInstance, } from './internals';
function overrideNonDirectiveInstanceMethod(instance, destroyMethodName, symbol) {
    const originalDestroy = instance[destroyMethodName];
    if (ngDevMode && typeof originalDestroy !== 'function') {
        throw new Error(`${instance.constructor.name} is using untilDestroyed but doesn't implement ${destroyMethodName}`);
    }
    createSubjectOnTheInstance(instance, symbol);
    instance[destroyMethodName] = function () {
        // eslint-disable-next-line prefer-rest-params
        originalDestroy.apply(this, arguments);
        completeSubjectOnTheInstance(this, symbol);
        // We have to re-assign this property back to the original value.
        // If the `untilDestroyed` operator is called for the same instance
        // multiple times, then we will be able to get the original
        // method again and not the patched one.
        instance[destroyMethodName] = originalDestroy;
    };
}
export function untilDestroyed(instance, destroyMethodName) {
    return (source) => {
        const symbol = getSymbol(destroyMethodName);
        // If `destroyMethodName` is passed then the developer applies
        // this operator to something non-related to Angular DI system
        if (typeof destroyMethodName === 'string') {
            overrideNonDirectiveInstanceMethod(instance, destroyMethodName, symbol);
        }
        else {
            ngDevMode && ensureClassIsDecorated(instance);
            createSubjectOnTheInstance(instance, symbol);
        }
        const destroy$ = instance[symbol];
        ngDevMode && setupSubjectUnsubscribedChecker(instance, destroy$);
        return source.pipe(takeUntil(destroy$));
    };
}
function ensureClassIsDecorated(instance) {
    const prototype = Object.getPrototypeOf(instance);
    const missingDecorator = !(DECORATOR_APPLIED in prototype);
    if (missingDecorator) {
        throw new Error('untilDestroyed operator cannot be used inside directives or ' +
            'components or providers that are not decorated with UntilDestroy decorator');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW50aWwtZGVzdHJveWVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy91bnRpbC1kZXN0cm95L3NyYy9saWIvdW50aWwtZGVzdHJveWVkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzQyxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDNUQsT0FBTyxFQUNMLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsMEJBQTBCLEVBQzFCLDRCQUE0QixHQUM3QixNQUFNLGFBQWEsQ0FBQztBQU1yQixTQUFTLGtDQUFrQyxDQUN6QyxRQUFhLEVBQ2IsaUJBQXlCLEVBQ3pCLE1BQWM7SUFFZCxNQUFNLGVBQWUsR0FBRyxRQUFRLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUVwRCxJQUFJLFNBQVMsSUFBSSxPQUFPLGVBQWUsS0FBSyxVQUFVLEVBQUU7UUFDdEQsTUFBTSxJQUFJLEtBQUssQ0FDYixHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxrREFBa0QsaUJBQWlCLEVBQUUsQ0FDbEcsQ0FBQztLQUNIO0lBRUQsMEJBQTBCLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBRTdDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHO1FBQzVCLDhDQUE4QztRQUM5QyxlQUFlLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztRQUN2Qyw0QkFBNEIsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDM0MsaUVBQWlFO1FBQ2pFLG1FQUFtRTtRQUNuRSwyREFBMkQ7UUFDM0Qsd0NBQXdDO1FBQ3hDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLGVBQWUsQ0FBQztJQUNoRCxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLGNBQWMsQ0FBSSxRQUFXLEVBQUUsaUJBQTJCO0lBQ3hFLE9BQU8sQ0FBSSxNQUFxQixFQUFFLEVBQUU7UUFDbEMsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFJLGlCQUFpQixDQUFDLENBQUM7UUFFL0MsOERBQThEO1FBQzlELDhEQUE4RDtRQUM5RCxJQUFJLE9BQU8saUJBQWlCLEtBQUssUUFBUSxFQUFFO1lBQ3pDLGtDQUFrQyxDQUFDLFFBQVEsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLENBQUMsQ0FBQztTQUN6RTthQUFNO1lBQ0wsU0FBUyxJQUFJLHNCQUFzQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzlDLDBCQUEwQixDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztTQUM5QztRQUVELE1BQU0sUUFBUSxHQUFtQixRQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELFNBQVMsSUFBSSwrQkFBK0IsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFakUsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBSSxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzdDLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLHNCQUFzQixDQUFDLFFBQTJCO0lBQ3pELE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbEQsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLENBQUMsaUJBQWlCLElBQUksU0FBUyxDQUFDLENBQUM7SUFFM0QsSUFBSSxnQkFBZ0IsRUFBRTtRQUNwQixNQUFNLElBQUksS0FBSyxDQUNiLDhEQUE4RDtZQUM1RCw0RUFBNEUsQ0FDL0UsQ0FBQztLQUNIO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgc2V0dXBTdWJqZWN0VW5zdWJzY3JpYmVkQ2hlY2tlciB9IGZyb20gJy4vY2hlY2tlcic7XG5pbXBvcnQge1xuICBERUNPUkFUT1JfQVBQTElFRCxcbiAgZ2V0U3ltYm9sLFxuICBjcmVhdGVTdWJqZWN0T25UaGVJbnN0YW5jZSxcbiAgY29tcGxldGVTdWJqZWN0T25UaGVJbnN0YW5jZSxcbn0gZnJvbSAnLi9pbnRlcm5hbHMnO1xuXG4vLyBUaGlzIHdpbGwgYmUgcHJvdmlkZWQgdGhyb3VnaCBUZXJzZXIgZ2xvYmFsIGRlZmluaXRpb25zIGJ5IEFuZ3VsYXIgQ0xJLiBUaGlzIHdpbGxcbi8vIGhlbHAgdG8gdHJlZS1zaGFrZSBhd2F5IHRoZSBjb2RlIHVubmVlZGVkIGZvciBwcm9kdWN0aW9uIGJ1bmRsZXMuXG5kZWNsYXJlIGNvbnN0IG5nRGV2TW9kZTogYm9vbGVhbjtcblxuZnVuY3Rpb24gb3ZlcnJpZGVOb25EaXJlY3RpdmVJbnN0YW5jZU1ldGhvZChcbiAgaW5zdGFuY2U6IGFueSxcbiAgZGVzdHJveU1ldGhvZE5hbWU6IHN0cmluZyxcbiAgc3ltYm9sOiBzeW1ib2xcbik6IHZvaWQge1xuICBjb25zdCBvcmlnaW5hbERlc3Ryb3kgPSBpbnN0YW5jZVtkZXN0cm95TWV0aG9kTmFtZV07XG5cbiAgaWYgKG5nRGV2TW9kZSAmJiB0eXBlb2Ygb3JpZ2luYWxEZXN0cm95ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYCR7aW5zdGFuY2UuY29uc3RydWN0b3IubmFtZX0gaXMgdXNpbmcgdW50aWxEZXN0cm95ZWQgYnV0IGRvZXNuJ3QgaW1wbGVtZW50ICR7ZGVzdHJveU1ldGhvZE5hbWV9YFxuICAgICk7XG4gIH1cblxuICBjcmVhdGVTdWJqZWN0T25UaGVJbnN0YW5jZShpbnN0YW5jZSwgc3ltYm9sKTtcblxuICBpbnN0YW5jZVtkZXN0cm95TWV0aG9kTmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgIG9yaWdpbmFsRGVzdHJveS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGNvbXBsZXRlU3ViamVjdE9uVGhlSW5zdGFuY2UodGhpcywgc3ltYm9sKTtcbiAgICAvLyBXZSBoYXZlIHRvIHJlLWFzc2lnbiB0aGlzIHByb3BlcnR5IGJhY2sgdG8gdGhlIG9yaWdpbmFsIHZhbHVlLlxuICAgIC8vIElmIHRoZSBgdW50aWxEZXN0cm95ZWRgIG9wZXJhdG9yIGlzIGNhbGxlZCBmb3IgdGhlIHNhbWUgaW5zdGFuY2VcbiAgICAvLyBtdWx0aXBsZSB0aW1lcywgdGhlbiB3ZSB3aWxsIGJlIGFibGUgdG8gZ2V0IHRoZSBvcmlnaW5hbFxuICAgIC8vIG1ldGhvZCBhZ2FpbiBhbmQgbm90IHRoZSBwYXRjaGVkIG9uZS5cbiAgICBpbnN0YW5jZVtkZXN0cm95TWV0aG9kTmFtZV0gPSBvcmlnaW5hbERlc3Ryb3k7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnRpbERlc3Ryb3llZDxUPihpbnN0YW5jZTogVCwgZGVzdHJveU1ldGhvZE5hbWU/OiBrZXlvZiBUKSB7XG4gIHJldHVybiA8VT4oc291cmNlOiBPYnNlcnZhYmxlPFU+KSA9PiB7XG4gICAgY29uc3Qgc3ltYm9sID0gZ2V0U3ltYm9sPFQ+KGRlc3Ryb3lNZXRob2ROYW1lKTtcblxuICAgIC8vIElmIGBkZXN0cm95TWV0aG9kTmFtZWAgaXMgcGFzc2VkIHRoZW4gdGhlIGRldmVsb3BlciBhcHBsaWVzXG4gICAgLy8gdGhpcyBvcGVyYXRvciB0byBzb21ldGhpbmcgbm9uLXJlbGF0ZWQgdG8gQW5ndWxhciBESSBzeXN0ZW1cbiAgICBpZiAodHlwZW9mIGRlc3Ryb3lNZXRob2ROYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgb3ZlcnJpZGVOb25EaXJlY3RpdmVJbnN0YW5jZU1ldGhvZChpbnN0YW5jZSwgZGVzdHJveU1ldGhvZE5hbWUsIHN5bWJvbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5nRGV2TW9kZSAmJiBlbnN1cmVDbGFzc0lzRGVjb3JhdGVkKGluc3RhbmNlKTtcbiAgICAgIGNyZWF0ZVN1YmplY3RPblRoZUluc3RhbmNlKGluc3RhbmNlLCBzeW1ib2wpO1xuICAgIH1cblxuICAgIGNvbnN0IGRlc3Ryb3kkOiBTdWJqZWN0PHZvaWQ+ID0gKGluc3RhbmNlIGFzIGFueSlbc3ltYm9sXTtcbiAgICBuZ0Rldk1vZGUgJiYgc2V0dXBTdWJqZWN0VW5zdWJzY3JpYmVkQ2hlY2tlcihpbnN0YW5jZSwgZGVzdHJveSQpO1xuXG4gICAgcmV0dXJuIHNvdXJjZS5waXBlKHRha2VVbnRpbDxVPihkZXN0cm95JCkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBlbnN1cmVDbGFzc0lzRGVjb3JhdGVkKGluc3RhbmNlOiBJbnN0YW5jZVR5cGU8YW55Pik6IG5ldmVyIHwgdm9pZCB7XG4gIGNvbnN0IHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihpbnN0YW5jZSk7XG4gIGNvbnN0IG1pc3NpbmdEZWNvcmF0b3IgPSAhKERFQ09SQVRPUl9BUFBMSUVEIGluIHByb3RvdHlwZSk7XG5cbiAgaWYgKG1pc3NpbmdEZWNvcmF0b3IpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAndW50aWxEZXN0cm95ZWQgb3BlcmF0b3IgY2Fubm90IGJlIHVzZWQgaW5zaWRlIGRpcmVjdGl2ZXMgb3IgJyArXG4gICAgICAgICdjb21wb25lbnRzIG9yIHByb3ZpZGVycyB0aGF0IGFyZSBub3QgZGVjb3JhdGVkIHdpdGggVW50aWxEZXN0cm95IGRlY29yYXRvcidcbiAgICApO1xuICB9XG59XG4iXX0=